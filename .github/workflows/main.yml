name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event for the master branch
  push:    
    branches: [main]

jobs:
  deploy:
    # Our previously created self-hosted runner
    runs-on: self-hosted
    
    strategy:
      matrix:
        dotnet-version: ['7.0.x']
        
    env:
      DOTNET_INSTALL_DIR: "./.dotnet"

    # A sequence of tasks that will execute as part of the job
    steps:
      # Checks out repository so our job can access it
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}   
          
      - name: Deploy Backend
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet publish -c Release --property:PublishDir=/var/www/quiz-game
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          systemctl --user restart quiz-game.service
        working-directory: ./backend
      - uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/frontend/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Deploy Frontend
        run: |
          npm install --force
          npm run build
          pm2 restart frontend
        working-directory: ./frontend
          
      
